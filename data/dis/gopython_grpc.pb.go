// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: data/proto/gopython.proto

package dis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlgoClient is the client API for Algo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlgoClient interface {
	GetDis(ctx context.Context, in *DisRequest, opts ...grpc.CallOption) (*DisReply, error)
}

type algoClient struct {
	cc grpc.ClientConnInterface
}

func NewAlgoClient(cc grpc.ClientConnInterface) AlgoClient {
	return &algoClient{cc}
}

func (c *algoClient) GetDis(ctx context.Context, in *DisRequest, opts ...grpc.CallOption) (*DisReply, error) {
	out := new(DisReply)
	err := c.cc.Invoke(ctx, "/Algo/GetDis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlgoServer is the server API for Algo service.
// All implementations must embed UnimplementedAlgoServer
// for forward compatibility
type AlgoServer interface {
	GetDis(context.Context, *DisRequest) (*DisReply, error)
	mustEmbedUnimplementedAlgoServer()
}

// UnimplementedAlgoServer must be embedded to have forward compatible implementations.
type UnimplementedAlgoServer struct {
}

func (UnimplementedAlgoServer) GetDis(context.Context, *DisRequest) (*DisReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDis not implemented")
}
func (UnimplementedAlgoServer) mustEmbedUnimplementedAlgoServer() {}

// UnsafeAlgoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlgoServer will
// result in compilation errors.
type UnsafeAlgoServer interface {
	mustEmbedUnimplementedAlgoServer()
}

func RegisterAlgoServer(s grpc.ServiceRegistrar, srv AlgoServer) {
	s.RegisterService(&Algo_ServiceDesc, srv)
}

func _Algo_GetDis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlgoServer).GetDis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Algo/GetDis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlgoServer).GetDis(ctx, req.(*DisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Algo_ServiceDesc is the grpc.ServiceDesc for Algo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Algo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Algo",
	HandlerType: (*AlgoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDis",
			Handler:    _Algo_GetDis_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data/proto/gopython.proto",
}
